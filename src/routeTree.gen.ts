/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TermsConditionsImport } from './routes/terms-conditions'
import { Route as PrivacyPolicyImport } from './routes/privacy-policy'
import { Route as PaymentImport } from './routes/payment'
import { Route as GatewayApiImport } from './routes/gateway-api'
import { Route as DocsImport } from './routes/docs'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const TermsConditionsRoute = TermsConditionsImport.update({
  id: '/terms-conditions',
  path: '/terms-conditions',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyPolicyRoute = PrivacyPolicyImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => rootRoute,
} as any)

const PaymentRoute = PaymentImport.update({
  id: '/payment',
  path: '/payment',
  getParentRoute: () => rootRoute,
} as any)

const GatewayApiRoute = GatewayApiImport.update({
  id: '/gateway-api',
  path: '/gateway-api',
  getParentRoute: () => rootRoute,
} as any)

const DocsRoute = DocsImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/docs': {
      id: '/docs'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof DocsImport
      parentRoute: typeof rootRoute
    }
    '/gateway-api': {
      id: '/gateway-api'
      path: '/gateway-api'
      fullPath: '/gateway-api'
      preLoaderRoute: typeof GatewayApiImport
      parentRoute: typeof rootRoute
    }
    '/payment': {
      id: '/payment'
      path: '/payment'
      fullPath: '/payment'
      preLoaderRoute: typeof PaymentImport
      parentRoute: typeof rootRoute
    }
    '/privacy-policy': {
      id: '/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof PrivacyPolicyImport
      parentRoute: typeof rootRoute
    }
    '/terms-conditions': {
      id: '/terms-conditions'
      path: '/terms-conditions'
      fullPath: '/terms-conditions'
      preLoaderRoute: typeof TermsConditionsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/docs': typeof DocsRoute
  '/gateway-api': typeof GatewayApiRoute
  '/payment': typeof PaymentRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/terms-conditions': typeof TermsConditionsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/docs': typeof DocsRoute
  '/gateway-api': typeof GatewayApiRoute
  '/payment': typeof PaymentRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/terms-conditions': typeof TermsConditionsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/docs': typeof DocsRoute
  '/gateway-api': typeof GatewayApiRoute
  '/payment': typeof PaymentRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/terms-conditions': typeof TermsConditionsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/docs'
    | '/gateway-api'
    | '/payment'
    | '/privacy-policy'
    | '/terms-conditions'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/docs'
    | '/gateway-api'
    | '/payment'
    | '/privacy-policy'
    | '/terms-conditions'
  id:
    | '__root__'
    | '/'
    | '/docs'
    | '/gateway-api'
    | '/payment'
    | '/privacy-policy'
    | '/terms-conditions'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DocsRoute: typeof DocsRoute
  GatewayApiRoute: typeof GatewayApiRoute
  PaymentRoute: typeof PaymentRoute
  PrivacyPolicyRoute: typeof PrivacyPolicyRoute
  TermsConditionsRoute: typeof TermsConditionsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DocsRoute: DocsRoute,
  GatewayApiRoute: GatewayApiRoute,
  PaymentRoute: PaymentRoute,
  PrivacyPolicyRoute: PrivacyPolicyRoute,
  TermsConditionsRoute: TermsConditionsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/docs",
        "/gateway-api",
        "/payment",
        "/privacy-policy",
        "/terms-conditions"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/docs": {
      "filePath": "docs.tsx"
    },
    "/gateway-api": {
      "filePath": "gateway-api.tsx"
    },
    "/payment": {
      "filePath": "payment.tsx"
    },
    "/privacy-policy": {
      "filePath": "privacy-policy.tsx"
    },
    "/terms-conditions": {
      "filePath": "terms-conditions.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
