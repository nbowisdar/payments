/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as PaymentsIndexImport } from './routes/payments/index'
import { Route as PaymentsTermsConditionsImport } from './routes/payments/terms-conditions'
import { Route as PaymentsPrivacyPolicyImport } from './routes/payments/privacy-policy'
import { Route as PaymentsPaymentImport } from './routes/payments/payment'
import { Route as PaymentsGatewayApiImport } from './routes/payments/gateway-api'
import { Route as PaymentsDocsImport } from './routes/payments/docs'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PaymentsIndexRoute = PaymentsIndexImport.update({
  id: '/payments/',
  path: '/payments/',
  getParentRoute: () => rootRoute,
} as any)

const PaymentsTermsConditionsRoute = PaymentsTermsConditionsImport.update({
  id: '/payments/terms-conditions',
  path: '/payments/terms-conditions',
  getParentRoute: () => rootRoute,
} as any)

const PaymentsPrivacyPolicyRoute = PaymentsPrivacyPolicyImport.update({
  id: '/payments/privacy-policy',
  path: '/payments/privacy-policy',
  getParentRoute: () => rootRoute,
} as any)

const PaymentsPaymentRoute = PaymentsPaymentImport.update({
  id: '/payments/payment',
  path: '/payments/payment',
  getParentRoute: () => rootRoute,
} as any)

const PaymentsGatewayApiRoute = PaymentsGatewayApiImport.update({
  id: '/payments/gateway-api',
  path: '/payments/gateway-api',
  getParentRoute: () => rootRoute,
} as any)

const PaymentsDocsRoute = PaymentsDocsImport.update({
  id: '/payments/docs',
  path: '/payments/docs',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/payments/docs': {
      id: '/payments/docs'
      path: '/payments/docs'
      fullPath: '/payments/docs'
      preLoaderRoute: typeof PaymentsDocsImport
      parentRoute: typeof rootRoute
    }
    '/payments/gateway-api': {
      id: '/payments/gateway-api'
      path: '/payments/gateway-api'
      fullPath: '/payments/gateway-api'
      preLoaderRoute: typeof PaymentsGatewayApiImport
      parentRoute: typeof rootRoute
    }
    '/payments/payment': {
      id: '/payments/payment'
      path: '/payments/payment'
      fullPath: '/payments/payment'
      preLoaderRoute: typeof PaymentsPaymentImport
      parentRoute: typeof rootRoute
    }
    '/payments/privacy-policy': {
      id: '/payments/privacy-policy'
      path: '/payments/privacy-policy'
      fullPath: '/payments/privacy-policy'
      preLoaderRoute: typeof PaymentsPrivacyPolicyImport
      parentRoute: typeof rootRoute
    }
    '/payments/terms-conditions': {
      id: '/payments/terms-conditions'
      path: '/payments/terms-conditions'
      fullPath: '/payments/terms-conditions'
      preLoaderRoute: typeof PaymentsTermsConditionsImport
      parentRoute: typeof rootRoute
    }
    '/payments/': {
      id: '/payments/'
      path: '/payments'
      fullPath: '/payments'
      preLoaderRoute: typeof PaymentsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/payments/docs': typeof PaymentsDocsRoute
  '/payments/gateway-api': typeof PaymentsGatewayApiRoute
  '/payments/payment': typeof PaymentsPaymentRoute
  '/payments/privacy-policy': typeof PaymentsPrivacyPolicyRoute
  '/payments/terms-conditions': typeof PaymentsTermsConditionsRoute
  '/payments': typeof PaymentsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/payments/docs': typeof PaymentsDocsRoute
  '/payments/gateway-api': typeof PaymentsGatewayApiRoute
  '/payments/payment': typeof PaymentsPaymentRoute
  '/payments/privacy-policy': typeof PaymentsPrivacyPolicyRoute
  '/payments/terms-conditions': typeof PaymentsTermsConditionsRoute
  '/payments': typeof PaymentsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/payments/docs': typeof PaymentsDocsRoute
  '/payments/gateway-api': typeof PaymentsGatewayApiRoute
  '/payments/payment': typeof PaymentsPaymentRoute
  '/payments/privacy-policy': typeof PaymentsPrivacyPolicyRoute
  '/payments/terms-conditions': typeof PaymentsTermsConditionsRoute
  '/payments/': typeof PaymentsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/payments/docs'
    | '/payments/gateway-api'
    | '/payments/payment'
    | '/payments/privacy-policy'
    | '/payments/terms-conditions'
    | '/payments'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/payments/docs'
    | '/payments/gateway-api'
    | '/payments/payment'
    | '/payments/privacy-policy'
    | '/payments/terms-conditions'
    | '/payments'
  id:
    | '__root__'
    | '/'
    | '/payments/docs'
    | '/payments/gateway-api'
    | '/payments/payment'
    | '/payments/privacy-policy'
    | '/payments/terms-conditions'
    | '/payments/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PaymentsDocsRoute: typeof PaymentsDocsRoute
  PaymentsGatewayApiRoute: typeof PaymentsGatewayApiRoute
  PaymentsPaymentRoute: typeof PaymentsPaymentRoute
  PaymentsPrivacyPolicyRoute: typeof PaymentsPrivacyPolicyRoute
  PaymentsTermsConditionsRoute: typeof PaymentsTermsConditionsRoute
  PaymentsIndexRoute: typeof PaymentsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PaymentsDocsRoute: PaymentsDocsRoute,
  PaymentsGatewayApiRoute: PaymentsGatewayApiRoute,
  PaymentsPaymentRoute: PaymentsPaymentRoute,
  PaymentsPrivacyPolicyRoute: PaymentsPrivacyPolicyRoute,
  PaymentsTermsConditionsRoute: PaymentsTermsConditionsRoute,
  PaymentsIndexRoute: PaymentsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/payments/docs",
        "/payments/gateway-api",
        "/payments/payment",
        "/payments/privacy-policy",
        "/payments/terms-conditions",
        "/payments/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/payments/docs": {
      "filePath": "payments/docs.tsx"
    },
    "/payments/gateway-api": {
      "filePath": "payments/gateway-api.tsx"
    },
    "/payments/payment": {
      "filePath": "payments/payment.tsx"
    },
    "/payments/privacy-policy": {
      "filePath": "payments/privacy-policy.tsx"
    },
    "/payments/terms-conditions": {
      "filePath": "payments/terms-conditions.tsx"
    },
    "/payments/": {
      "filePath": "payments/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
